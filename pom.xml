<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<properties>
		<artifact.version>0.0.1-SNAPSHOT</artifact.version>
		<axon.version>3.0</axon.version>
		<java.version>1.8</java.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<spring-boot.version>1.5.1.RELEASE</spring-boot.version>
		<docker-maven.version>0.4.13</docker-maven.version>
		<docker.image.prefix>dockerpinguin</docker.image.prefix>
		<docker.repository>docker.io</docker.repository>
		<!-- Set docker.skip to true to disable Docker.
             Useful to build apps on systems where Docker is not installed. -->
		<docker.skip>false</docker.skip>
	</properties>

	<groupId>com.example</groupId>
	<artifactId>demo-complaints-stats</artifactId>
	<version>${artifact.version}</version>
	<packaging>jar</packaging>

	<name>demo-complaints-stats</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>${spring-boot.version}</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<scm>
		<connection>scm:git:https://github.com/bvpelt/demo-complaints-stats.git</connection>
		<developerConnection>scm:git:https://github.com/bvpelt/demo-complaints-stats.git</developerConnection>
		<tag>HEAD</tag>
	</scm>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
        <dependency>
            <groupId>org.axonframework</groupId>
            <artifactId>axon-spring-boot-starter</artifactId>
            <version>${axon.version}</version>
        </dependency>
        <dependency>
            <groupId>org.axonframework</groupId>
            <artifactId>axon-amqp</artifactId>
            <version>${axon.version}</version>
        </dependency>

		<!-- Test dependencies -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<artifactId>maven-release-plugin</artifactId>
				<version>2.5.3</version>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.scm</groupId>
						<artifactId>maven-scm-api</artifactId>
						<version>1.9.5</version>
					</dependency>
					<dependency>
						<groupId>org.apache.maven.scm</groupId>
						<artifactId>maven-scm-provider-gitexe</artifactId>
						<version>1.9.5</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>com.spotify</groupId>
					<artifactId>docker-maven-plugin</artifactId>
					<version>${docker-maven.version}</version>
					<configuration>
						<imageName>${docker.image.prefix}/${project.artifactId}</imageName>
						<baseImage>java:openjdk-8-jdk-alpine</baseImage>
						<entryPoint>["java","-Djava.security.egd=file:/dev/./urandom","-jar","/${project.build.finalName}.jar"]</entryPoint>
						<serverId>docker-hub</serverId>
						<skipDockerBuild>${docker.skip}</skipDockerBuild>
						<!--
                        <dockerDirectory>${project.basedir}/docker</dockerDirectory>
                        -->
						<resources>
							<!-- copy the service's jar file from target into the root directory of the image -->
							<resource>
								<targetPath>/</targetPath>
								<directory>${project.build.directory}</directory>
								<include>${project.build.finalName}.jar</include>
							</resource>
							<!-- Copy contents of project's docker directory, if it exists.
                                 Used to pull in docker build specific application.properties settings
                            <resource>
                                <targetPath>/</targetPath>
                                <directory>${project.basedir}/docker</directory>
                                <include>*</include>
                            </resource>
                            -->
						</resources>
						<exposes>
							<expose>8080</expose>
						</exposes>
						<!-- optionally overwrite tags every time image is built with docker:build -->
						<forceTags>true</forceTags>
						<imageTags>
							<imageTag>${project.version}</imageTag>
							<imageTag>latest</imageTag>
						</imageTags>
					</configuration>
					<executions>
						<execution>
							<id>build-image</id>
							<phase>package</phase>
							<goals>
								<goal>build</goal>
							</goals>
						</execution>
						<execution>
							<id>tag-image-version</id>
							<phase>deploy</phase>
							<goals>
								<goal>tag</goal>
							</goals>
							<configuration>
								<image>${docker.image.prefix}/${project.artifactId}</image>
								<newName>${docker.repository}/${docker.image.prefix}/${project.artifactId}:${project.version}</newName>
								<pushImage>true</pushImage>
							</configuration>
						</execution>
						<execution>
							<id>tag-image-latest</id>
							<phase>deploy</phase>
							<goals>
								<goal>tag</goal>
							</goals>
							<configuration>
								<image>${docker.image.prefix}/${project.artifactId}</image>
								<newName>${docker.repository}/${docker.image.prefix}/${project.artifactId}:latest</newName>
								<pushImage>true</pushImage>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

</project>
